-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc_256\hdlcoderfftdit\HDL_FFT.vhd
-- Created: 2016-12-19 13:39:19
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_FFT
-- Source Path: hdlcoderfftdit/HDLFFTDUT/HDL FFT
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_FFT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din_re                            :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        din_im                            :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        start                             :   IN    std_logic;
        dout_re                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        dout_im                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        dvalid                            :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END HDL_FFT;


ARCHITECTURE rtl OF HDL_FFT IS

  -- Component Declarations
  COMPONENT TwiddleTable
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          twindex                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          twiddle_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          twiddle_im                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  COMPONENT Butterfly
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          twiddle_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          twiddle_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          multin_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          multin_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          dmultin_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          dmultin_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          bfin2sel                        :   IN    std_logic;
          bfin1_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          bfin1_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          dbfout1_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          dbfout1_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          dbfout_2_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          dbfout_2_im                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- int16
          );
  END COMPONENT;

  COMPONENT DualPortRam
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          din_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          wraddr                          :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
          we                              :   IN    std_logic;
          rdaddr                          :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
          wout_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          wout_im                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          rout_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          rout_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- int16
          );
  END COMPONENT;

  COMPONENT FFTLogic
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          din_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          wout_m1b1_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          wout_m1b1_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          rout_m1b1_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          rout_m1b1_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          wout_m1b2_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          wout_m1b2_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          rout_m1b2_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          rout_m1b2_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          wout_m2b1_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          wout_m2b1_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          rout_m2b1_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          rout_m2b1_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          wout_m2b2_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          wout_m2b2_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          rout_m2b2_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          rout_m2b2_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          dbfout1_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          dbfout1_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          dbfout_2_re                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          dbfout_2_im                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          start                           :   IN    std_logic;
          dout_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          dout_im                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          wdatab1_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          wdatab1_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          wdatab2_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          wdatab2_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          waddrm1                         :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          waddrm2                         :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          m1b1wr_en                       :   OUT   std_logic;
          m1b2wr_en                       :   OUT   std_logic;
          m2wr_en                         :   OUT   std_logic;
          addrbf                          :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          twindex                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          multin_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          multin_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          dmultin_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          dmultin_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          bfin2sel                        :   OUT   std_logic;
          bfin1_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          bfin1_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          dvalid                          :   OUT   std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : TwiddleTable
    USE ENTITY work.TwiddleTable(rtl);

  FOR ALL : Butterfly
    USE ENTITY work.Butterfly(rtl);

  FOR ALL : DualPortRam
    USE ENTITY work.DualPortRam(rtl);

  FOR ALL : FFTLogic
    USE ENTITY work.FFTLogic(rtl);

  -- Signals
  SIGNAL twindex                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL twiddle_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL twiddle_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL multin_re                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL multin_im                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dmultin_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dmultin_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL bfin2sel                         : std_logic;
  SIGNAL bfin1_re                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL bfin1_im                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dbfout1_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dbfout1_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dbfout_2_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dbfout_2_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wdatab2_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wdatab2_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL waddrm2                          : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL m2wr_en                          : std_logic;
  SIGNAL addrbf                           : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL wout_m2b2_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wout_m2b2_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rout_m2b2_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rout_m2b2_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wdatab1_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wdatab1_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wout_m2b1_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wout_m2b1_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rout_m2b1_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rout_m2b1_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL waddrm1                          : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL m1b2wr_en                        : std_logic;
  SIGNAL wout_m1b2_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wout_m1b2_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rout_m1b2_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rout_m1b2_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL m1b1wr_en                        : std_logic;
  SIGNAL wout_m1b1_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wout_m1b1_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rout_m1b1_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rout_m1b1_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dout_re_tmp                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dout_im_tmp                      : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_TwiddleTable0 : TwiddleTable
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              twindex => twindex,  -- ufix8
              twiddle_re => twiddle_re,  -- sfix16_En15
              twiddle_im => twiddle_im  -- sfix16_En15
              );

  u_Butterfly0 : Butterfly
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              twiddle_re => twiddle_re,  -- sfix16_En15
              twiddle_im => twiddle_im,  -- sfix16_En15
              multin_re => multin_re,  -- int16
              multin_im => multin_im,  -- int16
              dmultin_re => dmultin_re,  -- int16
              dmultin_im => dmultin_im,  -- int16
              bfin2sel => bfin2sel,
              bfin1_re => bfin1_re,  -- int16
              bfin1_im => bfin1_im,  -- int16
              dbfout1_re => dbfout1_re,  -- int16
              dbfout1_im => dbfout1_im,  -- int16
              dbfout_2_re => dbfout_2_re,  -- int16
              dbfout_2_im => dbfout_2_im  -- int16
              );

  u_DualRam_m2b2 : DualPortRam
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_re => wdatab2_re,  -- int16
              din_im => wdatab2_im,  -- int16
              wraddr => waddrm2,  -- ufix7
              we => m2wr_en,
              rdaddr => addrbf,  -- ufix7
              wout_re => wout_m2b2_re,  -- int16
              wout_im => wout_m2b2_im,  -- int16
              rout_re => rout_m2b2_re,  -- int16
              rout_im => rout_m2b2_im  -- int16
              );

  u_DualRam_m2b1 : DualPortRam
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_re => wdatab1_re,  -- int16
              din_im => wdatab1_im,  -- int16
              wraddr => waddrm2,  -- ufix7
              we => m2wr_en,
              rdaddr => addrbf,  -- ufix7
              wout_re => wout_m2b1_re,  -- int16
              wout_im => wout_m2b1_im,  -- int16
              rout_re => rout_m2b1_re,  -- int16
              rout_im => rout_m2b1_im  -- int16
              );

  u_DualRam_m1b2 : DualPortRam
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_re => wdatab2_re,  -- int16
              din_im => wdatab2_im,  -- int16
              wraddr => waddrm1,  -- ufix7
              we => m1b2wr_en,
              rdaddr => addrbf,  -- ufix7
              wout_re => wout_m1b2_re,  -- int16
              wout_im => wout_m1b2_im,  -- int16
              rout_re => rout_m1b2_re,  -- int16
              rout_im => rout_m1b2_im  -- int16
              );

  u_DualRam_m1b1 : DualPortRam
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_re => wdatab1_re,  -- int16
              din_im => wdatab1_im,  -- int16
              wraddr => waddrm1,  -- ufix7
              we => m1b1wr_en,
              rdaddr => addrbf,  -- ufix7
              wout_re => wout_m1b1_re,  -- int16
              wout_im => wout_m1b1_im,  -- int16
              rout_re => rout_m1b1_re,  -- int16
              rout_im => rout_m1b1_im  -- int16
              );

  u_FFTLogic0 : FFTLogic
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_re => din_re,  -- int16
              din_im => din_im,  -- int16
              wout_m1b1_re => wout_m1b1_re,  -- int16
              wout_m1b1_im => wout_m1b1_im,  -- int16
              rout_m1b1_re => rout_m1b1_re,  -- int16
              rout_m1b1_im => rout_m1b1_im,  -- int16
              wout_m1b2_re => wout_m1b2_re,  -- int16
              wout_m1b2_im => wout_m1b2_im,  -- int16
              rout_m1b2_re => rout_m1b2_re,  -- int16
              rout_m1b2_im => rout_m1b2_im,  -- int16
              wout_m2b1_re => wout_m2b1_re,  -- int16
              wout_m2b1_im => wout_m2b1_im,  -- int16
              rout_m2b1_re => rout_m2b1_re,  -- int16
              rout_m2b1_im => rout_m2b1_im,  -- int16
              wout_m2b2_re => wout_m2b2_re,  -- int16
              wout_m2b2_im => wout_m2b2_im,  -- int16
              rout_m2b2_re => rout_m2b2_re,  -- int16
              rout_m2b2_im => rout_m2b2_im,  -- int16
              dbfout1_re => dbfout1_re,  -- int16
              dbfout1_im => dbfout1_im,  -- int16
              dbfout_2_re => dbfout_2_re,  -- int16
              dbfout_2_im => dbfout_2_im,  -- int16
              start => start,
              dout_re => dout_re_tmp,  -- int16
              dout_im => dout_im_tmp,  -- int16
              wdatab1_re => wdatab1_re,  -- int16
              wdatab1_im => wdatab1_im,  -- int16
              wdatab2_re => wdatab2_re,  -- int16
              wdatab2_im => wdatab2_im,  -- int16
              waddrm1 => waddrm1,  -- ufix7
              waddrm2 => waddrm2,  -- ufix7
              m1b1wr_en => m1b1wr_en,
              m1b2wr_en => m1b2wr_en,
              m2wr_en => m2wr_en,
              addrbf => addrbf,  -- ufix7
              twindex => twindex,  -- ufix8
              multin_re => multin_re,  -- int16
              multin_im => multin_im,  -- int16
              dmultin_re => dmultin_re,  -- int16
              dmultin_im => dmultin_im,  -- int16
              bfin2sel => bfin2sel,
              bfin1_re => bfin1_re,  -- int16
              bfin1_im => bfin1_im,  -- int16
              dvalid => dvalid,
              ready => ready
              );

  dout_re <= dout_re_tmp;

  dout_im <= dout_im_tmp;

END rtl;

